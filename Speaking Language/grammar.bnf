// Eric Wang, repository link: https://github.com/dasushii/Honors-Programming-Languages/

program ::= statementList?

statementList ::= statement statementList*

statement ::= expression
            | declaration
            | assignment "!"
            | loop
            | conditional
            | block
            | optionalReturn

expression ::= primary
            | unary
            | binary
            | functionCall
            | arrayCall
            | "nothing"

primary ::= literal
          | IDENTIFIER

unary ::= "increase"
        | "decrese"
        | "not"

binary ::= primary binaryOperator primary

binaryOperator ::= mathOperator
                 | comparator

mathOperator ::= "plus"
               | "minus"
               | "times"
               | "over"

comparator ::= "is greater than"
             | "is less than"
             | "is equal to"
             | "and"
             | "or"

functionCall ::= IDENTIFIER "(" parameterList? ")"
               | "announce" expression
               | "announce loudly" expression
               | "cut" "(" IDENTIFIER "and" INTEGER "to" INTEGER ")"
               | "length" IDENTIFIER
               | "convert" "(" STRING ")"
               | "fun"

parameterList ::= expression
                | expression "and" parameterList

literal ::= INTEGER
          | STRING
          | BOOLEAN
          | DOUBLE

declaration ::= variableDeclaration "!"
               | functionDeclaration
               | arrayDeclaration "!"

assignment ::= variableAssignment
            | arrayAssignment

variableAssignment ::= IDENTIFIER "has" expression

arrayDeclaration ::= "my array" IDENTIFIER "is size" INTEGER "with" variableType

variableDeclaration ::= "my" variableType IDENTIFIER
                      | "my" variableType IDENTIFIER  "has" expression

functionDeclaration ::= "my function" IDENTIFIER "accepts" "(" typeList? ")" "and distributes" "(" typeList? ")" block

typeList ::= variableType
            | variableType "and" typeList

variableType ::= "word" | "words"
            | "number" | "numbers"
            | "fact" | "facts"
            | "decimal" | "decimals"

arrayAssignment ::= IDENTIFIER "add" expression "[" INTEGER "]"

arrayCall ::= IDENTIFIER "[" expression "]"

comment ::= "psst," STRING "alright?"

conditional ::= "if" "(" expression ")" block

loop ::= whileLoop
        | untilLoop

whileLoop ::= "while" "(" expression ")" block

untilLoop ::= "until" "(" expression ")" block

block ::= "{" statementList? "}"

optionalReturn ::= "show" expression "!"
                | "show" "!"



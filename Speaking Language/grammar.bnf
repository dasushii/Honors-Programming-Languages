// Eric Wang, repository link: https://github.com/dasushii/Honors-Programming-Languages/

program ::= statementList?

statementList ::= statement "!" statementList*

statement ::= expression
            | declaration
            | assignment
            | loop
            | conditional
            | block

expression ::= primary
            | unary
            | binary
            | functionCall
            | arrayCall
            | "nothing"

primary ::= literal
          | IDENTIFIER
          | grouping

grouping ::= "(" expression ")"

unary ::= "increase"
        | "decrese"
        | "not"

binary ::= expression binaryOperator expression

binaryOperator ::= mathOperator
                 | comparator

mathOperator ::= "plus"
               | "minus"
               | "times"
               | "divided by"

comparator ::= "is greater than"
             | "is less than"
             | "is equal to"
             | "is greater than or equal to"
             | "is less than or equal to"
             | "is not greater than"
             | "is not less than"
             | "is not greater than or equal to"
             | "is not less than or equal to"
             | "is not equal to"

functionCall ::= IDENTIFIER "(" parameterList? ")"
               | "announce"
               | "announce loudly"
               | "cut my word" IDENTIFIER "from" INTEGER "to" INTEGER
               | "word length of" IDENTIFIER
               | "convert"
               | "fun"

parameterList ::= expression
                | expression "and" parameterList

literal ::= INTEGER
          | STRING
          | BOOLEAN
          | DOUBLE

declaration ::= variableDeclaration
               | functionDeclaration
               | arrayDeclaration

assignment ::= variableAssignment
            | arrayAssignment

variableAssignment ::= IDENTIFIER "is" expression

arrayDeclaration ::= "My array" IDENTIFIER "is size" INTEGER "with" variableType
                   | "My array" IDENTIFIER "is size" INTEGER "with" variableType "[" expression "]"

variableDeclaration ::= "My" variableType IDENTIFIER
                      | "My" variableType IDENTIFIER  "is" expression

functionDeclaration ::= "My function" IDENTIFIER "accepts" "(" typeList? ")" "and distributes" "(" typeList? ")" block

typeList ::= variableType
            | variableType "and" typeList

variableType ::= "Word" | "Words"
            | "number" | "numbers"
            | "fact" | "facts"
            | "decimal" | "decimals"

arrayAssignment ::= IDENTIFIER "add" "(" expression ")"

arrayCall ::= IDENTIFIER "[" expression "]"

comment ::= "psst," STRING* "alright?"

conditional ::= "if" "(" expression ")" block

loop ::= whileLoop
        | untilLoop

whileLoop ::= "while" "(" expression ")" block

untilLoop ::= "until" "(" expression ")" block

block ::= "{" statement* optionalReturn? statement* "}"

optionalReturn ::= "show" expression



